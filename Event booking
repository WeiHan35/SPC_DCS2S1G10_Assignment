#include <iostream>
#include <vector>
#include <string>
#include <fstream>   // for file I/O
#include <limits>    // for input validation

using namespace std;

const int MAX_DATES = 31; // Dates 1 to 31
const int MAX_VENUES = 5; // 5 venues
const int MAX_SLOTS = 3;  // Morning, Afternoon, Night

string timeSlots[MAX_SLOTS] = { "12pm-3pm", "4pm-7pm", "8pm-11pm" };
string venueNames[MAX_VENUES] = { "Hall A", "Hall B", "Hall C", "Outdoor", "VIP Lounge" };

int bookingStatus[MAX_DATES + 1][MAX_VENUES][MAX_SLOTS] = { {{0}} }; 

struct Booking {
    int date;
    int venue;
    int slot;
    string decoTheme;
    int decoCost;
    string vendorOption;
    int vendorCost;
};

vector<Booking> bookings;

void clearInput() {
    cin.clear();
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
}

void displayVenues() {
    cout << "Available Venues:\n";
    for (int i = 0; i < MAX_VENUES; i++) {
        cout << i + 1 << ". " << venueNames[i] << endl;
    }
}

void displayTimeSlots() {
    cout << "Available Time Slots:\n";
    for (int i = 0; i < MAX_SLOTS; i++) {
        cout << i + 1 << ". " << timeSlots[i] << endl;
    }
}

void displayDecorationThemes() {
    cout << "Decoration Themes:\n";
    cout << "1. Classic (RM 100)\n";
    cout << "2. Rustic  (RM 150)\n";
    cout << "3. Elegant (RM 200)\n";
}

// Save bookings to file
void saveBookingsToFile() {
    ofstream outFile("bookings.txt");
    for (const Booking& b : bookings) {
        outFile << b.date << ","
            << b.venue << ","
            << b.slot << ","
            << b.decoTheme << ","
            << b.decoCost << ","
            << b.vendorOption << ","
            << b.vendorCost << "\n";
    }
    outFile.close();
}

// Load bookings from file
void loadBookingsFromFile() {
    ifstream inFile("bookings.txt");
    if (!inFile) return; // this is to prevent when no file inside

    Booking b;
    char comma;
    while (inFile >> b.date >> comma >> b.venue >> comma >> b.slot >> comma) {
        getline(inFile, b.decoTheme, ',');
        inFile >> b.decoCost >> comma;
        getline(inFile, b.vendorOption, ',');
        inFile >> b.vendorCost;
        inFile.ignore();

        bookings.push_back(b);
        bookingStatus[b.date][b.venue][b.slot] = 1; // restore booking status
    }
    inFile.close();
}

void makeBooking() {
    int date, venue, slot;
    int themeChoice, vendorChoice;
    Booking newBooking;

    // Date validation
    do {
        cout << "Enter booking date (1-31): ";
        cin >> date;
        if (cin.fail() || date < 1 || date > MAX_DATES) {
            cout << "Invalid date! Please enter 1-31.\n";
            clearInput();
            continue;
        }
        break;
    } while (true);

    // Venue validation
    displayVenues();
    do {
        cout << "Select venue (1-" << MAX_VENUES << "): ";
        cin >> venue;
        if (cin.fail() || venue < 1 || venue > MAX_VENUES) {
            cout << "Invalid venue! Please enter between 1 and " << MAX_VENUES << ".\n";
            clearInput();
            continue;
        }
        venue--;
        break;
    } while (true);

    // Slot validation
    displayTimeSlots();
    do {
        cout << "Select time slot (1-" << MAX_SLOTS << "): ";
        cin >> slot;
        if (cin.fail() || slot < 1 || slot > MAX_SLOTS) {
            cout << "Invalid slot! Please enter between 1 and " << MAX_SLOTS << ".\n";
            clearInput();
            continue;
        }
        slot--;
        break;
    } while (true);

    if (bookingStatus[date][venue][slot] == 1) {
        cout << "I am sorry! This venue is already booked for this date and time slot.\n";
        return;
    }

    newBooking.date = date;
    newBooking.venue = venue;
    newBooking.slot = slot;

    // Decoration validation
    displayDecorationThemes();
    do {
        cout << "Choose table decoration theme (1-3): ";
        cin >> themeChoice;
        if (cin.fail() || themeChoice < 1 || themeChoice > 3) {
            cout << "Invalid theme choice!\n";
            clearInput();
            continue;
        }
        break;
    } while (true);

    switch (themeChoice) {
    case 1:
        newBooking.decoTheme = "Classic";
        newBooking.decoCost = 100;
        break;
    case 2:
        newBooking.decoTheme = "Rustic";
        newBooking.decoCost = 150;
        break;
    case 3:
        newBooking.decoTheme = "Elegant";
        newBooking.decoCost = 200;
        break;
    }

    // Vendor validation
    do {
        cout << "Vendor Options:\n";
        cout << "1. Self-arranged (RM 0)\n";
        cout << "2. Organizer-arranged (RM 300)\n";
        cout << "Select vendor option (1-2): ";
        cin >> vendorChoice;
        if (cin.fail() || (vendorChoice != 1 && vendorChoice != 2)) {
            cout << "Invalid vendor choice!\n";
            clearInput();
            continue;
        }
        break;
    } while (true);

    if (vendorChoice == 1) {
        newBooking.vendorOption = "Self-arranged";
        newBooking.vendorCost = 0;
    }
    else {
        newBooking.vendorOption = "Organizer-arranged";
        newBooking.vendorCost = 300;
    }

    // Mark as booked
    bookingStatus[date][venue][slot] = 1;

    // Save to vector
    bookings.push_back(newBooking);

    // Save immediately to file
    saveBookingsToFile();

    // Show summary
    cout << "\nBooking Confirmed!\n";
    cout << "Date: " << date
        << "\nVenue: " << venueNames[venue]
        << "\nTime Slot: " << timeSlots[slot]
        << "\nDecoration: " << newBooking.decoTheme << " (RM " << newBooking.decoCost << ")"
        << "\nVendor: " << newBooking.vendorOption << " (RM " << newBooking.vendorCost << ")"
        << "\nTotal Cost: RM " << (newBooking.decoCost + newBooking.vendorCost) << "\n";
}

void showAllBookings() {
    if (bookings.empty()) {
        cout << "\nNo bookings yet.\n";
        return;
    }
    cout << "\nAll Bookings:\n";
    for (const Booking& b : bookings) {
        cout << "Date: " << b.date
            << ", Venue: " << venueNames[b.venue]
            << ", Time: " << timeSlots[b.slot]
            << ", Deco: " << b.decoTheme
            << ", Vendor: " << b.vendorOption
            << ", Total: RM " << (b.decoCost + b.vendorCost)
            << "\n";
    }
}

int main() {
    loadBookingsFromFile(); // Load existing bookings

    int choice;
    do {
        cout << "\n==== Event Booking & Logistics System ====\n";
        cout << "1. Make a Booking\n";
        cout << "2. View All Bookings\n";
        cout << "0. Exit\n";
        cout << "Enter your choice: ";
        cin >> choice;

        if (cin.fail()) {
            cout << "Invalid input! Please enter a number.\n";
            clearInput();
            continue;
        }

        switch (choice) {
        case 1:
            makeBooking();
            break;
        case 2:
            showAllBookings();
            break;
        case 0:
            cout << "Goodbye!\n";
            break;
        default:
            cout << "Invalid choice.\n";
        }

    } while (choice != 0);

    return 0;
}
